[SIRI Export]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["sourcetype","date","time_recorded","agency_name","route_short_name","route_long_name","service_id","start_zone","end_zone","start_time","end_time","num_trips","peak_num_trips","mean_trip_duration","min_headway","window_interval","window_num","predicted_end_time","planned_start_time"]
display.events.type = table
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.statistics.drilldown = row
display.visualizations.charting.chart = bar
display.visualizations.custom.type = leaflet_maps_app.maps-plus
display.visualizations.show = 0
request.ui_dispatch_app = open-bus
request.ui_dispatch_view = search
search = (index=gtfs_stats OR index=siri) \
    route_id=16331 OR route_id=8846 OR route_id=20652 OR route_id=20651 OR route_id=11634 OR route_id=20750 OR route_id=11178 OR route_id=17195 OR route_id=17196 OR route_id=9024 OR route_id=21722 OR route_id=11179 OR route_id=16332 \
\
| eventstats first(agency_name) as agency_name \
    first(route_long_name) as route_long_name\
    first(route_type) as route_type\
    first(route_mkt) as route_mkt\
    first(route_direction) as route_direction\
    first(route_alternative) as route_alternative\
    first(num_trips) as num_trips\
    first(num_trip_starts) as num_trip_starts\
    first(num_trip_ends) as num_trip_ends\
    first(is_loop) as is_loop\
    first(is_bidirectional) as is_bidirectional\
    first(start_time) as start_time\
    first(end_time) as end_time\
    first(max_headway) as max_headway\
    first(min_headway) as min_headway\
    first(mean_headway) as mean_headway\
    first(peak_num_trips) as peak_num_trips\
    first(peak_start_time) as peak_start_time\
    first(peak_end_time) as peak_end_time\
    first(service_distance) as service_distance\
    first(service_duration) as service_duration\
    first(service_speed) as service_speed\
    first(mean_trip_distance) as mean_trip_distance\
    first(mean_trip_duration) as mean_trip_duration\
    first(start_stop_id) as start_stop_id\
    first(end_stop_id) as end_stop_id\
    first(start_stop_name) as start_stop_name\
    first(end_stop_name) as end_stop_name\
    first(start_stop_desc) as start_stop_desc\
    first(end_stop_desc) as end_stop_desc\
    first(start_stop_lat) as start_stop_lat\
    first(start_stop_lon) as start_stop_lon\
    first(end_stop_lat) as end_stop_lat\
    first(end_stop_lon) as end_stop_lon\
    first(num_stops) as num_stops\
    first(start_zone) as start_zone\
    first(end_zone) as end_zone\
    first(num_zones) as num_zones\
    first(num_zones_missing) as num_zones_missing by route_id date \
    | table timestamp time_recorded agency_id route_short_name route_id bus_id service_id planned_start_time predicted_end_time lat lon agency_name,route_long_name,route_type,route_mkt,route_direction,route_alternative,num_trips,num_trip_starts,num_trip_ends,is_loop,is_bidirectional,start_time,end_time,max_headway,min_headway,mean_headway,peak_num_trips,peak_start_time,peak_end_time,service_distance,service_duration,service_speed,mean_trip_distance,mean_trip_duration,start_stop_id,end_stop_id,start_stop_name,end_stop_name,start_stop_desc,end_stop_desc,start_stop_lat,start_stop_lon,end_stop_lat,end_stop_lon,num_stops,start_zone,end_zone,num_zones,num_zones_missing,date

[Allenby northbound trips]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = 0
display.events.fields = ["sourcetype","date","time_recorded","agency_name","route_short_name","route_long_name","service_id","start_zone","end_zone","start_time","end_time","num_trips","peak_num_trips","mean_trip_duration","min_headway","window_interval","window_num","predicted_end_time","planned_start_time"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = leaflet_maps_app.maps-plus
display.visualizations.show = 0
request.ui_dispatch_app = open-bus
request.ui_dispatch_view = search
search = index=route_stats | makemv delim=";" all_stop_code | where all_stop_code="21179" OR all_stop_code="25414" OR all_stop_code="22983" OR all_stop_code="22984" OR all_stop_code="21491" OR all_stop_code="22985" OR all_stop_code="23021" OR all_stop_code="25514" OR all_stop_code="23018" OR all_stop_code="23009" OR all_stop_code="23019" OR all_stop_code="25499" | stats sum(num_trips) as num_trips by date | streamstats window=7 max(num_trips)

[Compare num_trips Oct-18 vs Apr-19 by city]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = 0
display.events.fields = ["sourcetype","date","time_recorded","agency_name","route_short_name","route_long_name","service_id","start_zone","end_zone","start_time","end_time","num_trips","peak_num_trips","mean_trip_duration","min_headway","window_interval","window_num","predicted_end_time","planned_start_time"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = scatter
display.visualizations.custom.type = leaflet_maps_app.maps-plus
display.visualizations.show = 0
request.ui_dispatch_app = open-bus
request.ui_dispatch_view = search
search = index=route_stats date=2018-10-03 OR date=2019-04-03 | makemv delim=";" all_stop_desc_city | stats sum(num_trips) as num_trips by date all_stop_desc_city | xyseries all_stop_desc_city date num_trips| rename 2018-10-03 as oct 2019-04-03 as apr | eval ratio=apr/oct |

[Search by stop_code polygon]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = 1558818000
dispatch.latest_time = 1558904400
display.events.fields = ["sourcetype","date","time_recorded","agency_name","route_short_name","route_long_name","service_id","start_zone","end_zone","start_time","end_time","num_trips","peak_num_trips","mean_trip_duration","min_headway","window_interval","window_num","predicted_end_time","planned_start_time","timestamp"]
display.events.type = table
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = leaflet_maps_app.maps-plus
display.visualizations.show = 0
display.visualizations.type = singlevalue
request.ui_dispatch_app = open-bus
request.ui_dispatch_view = search
search = index=siri date=2019-05-26 date_hour>=19 date_hour<20[search index=route_stats date=2019-05-26  | makemv delim=";" all_stop_latlon | makemv delim=";" all_stop_code | search all_stop_code=1953 | head 1 | eval x = mvzip(all_stop_code, all_stop_latlon, "_") | mvexpand x | search x=1953_* | rex field=x "\d+_(?<lat>.*),(?<lon>.*)" | table lat lon \
| eval lat_min = lat-0.001, lat_max = lat+0.001, lon_min=lon-0.001, lon_max = lon+0.001 \
| eval search = "lat<".lat_max." AND lat>".lat_min." AND lon<".lon_max." AND lon>".lon_min | fields + search]\
| stats count by route_id route_short_name planned_start_time

[Find weird distance hops]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = 1558472400
dispatch.latest_time = 1558558800
display.events.fields = ["sourcetype","date","time_recorded","agency_name","route_short_name","route_long_name","service_id","start_zone","end_zone","start_time","end_time","num_trips","peak_num_trips","mean_trip_duration","min_headway","window_interval","window_num","predicted_end_time","planned_start_time","timestamp"]
display.events.type = table
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = leaflet_maps_app.maps-plus
display.visualizations.show = 0
display.visualizations.type = singlevalue
request.ui_dispatch_app = open-bus
request.ui_dispatch_view = search
search = index=siri lat!=0 agency_id="5" date=2019-05-22\
   | convert dur2sec(time_recorded) as time_recorded_secs \
   | sort 0 time_recorded_secs \
   | dedup time_recorded planned_start_time bus_id route_id \
   | streamstats first(lat) as prev_lat first(lon) as prev_lon window=1 current=false global=false by route_id bus_id planned_start_time\
   | eval lat_dif = abs(lat-prev_lat)\
   | eval lon_dif = abs(lon-prev_lon)\
   | eval dif=lat_dif+lon_dif\
   | bin lat_dif bins=30\
   | bin lon_dif bins=30\
   | bin dif bins=30\
   | eval id = route_id."_".planned_start_time\
   | chart count over id by dif useother=false usenull=false\
   | eval id = split(id, "_") | eval route_id = mvindex(id, 0), planned_start_time = mvindex(id, 1)\
   | join route_id [search index=route_stats date=2019-05-22 | fields + route_id route_short_name]\
   | where '0.01-0.02'>=5 OR '0.02-0.03'>=4
